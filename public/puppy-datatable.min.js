// Minimal vanilla DataTable class (client-side)
class DataTable {
    constructor(selector, options = {}) {
        this.table = document.querySelector(selector);
        this.columns = options.columns || [];
        this.tableHeader = options.tableHeader ? document.querySelector(options.tableHeader) : null;
        this.tableFooter = options.tableFooter ? document.querySelector(options.tableFooter) : null;
        this.dataSource = options.data;
        this.rows = [];
        this.total = 0;
        this.perPage = options.perPage || 10;
        this.currentPage = 1;
        this.q = '';
        this.sortBy = null;
        this.sortDir = 'asc';
        this.enablePaginate = 'enablePaginate' in options ? options.enablePaginate : true;
        this.enableSearch = 'enableSearch' in options ? options.enableSearch : true;
        this.enablePerPageSelector = 'enablePerPageSelector' in options ? options.enablePerPageSelector : true;
        this.loadData();
        this.injectStyles();
        this.renderHeader();
    }

    async loadData() {
        if (typeof this.dataSource === 'function') {
            const { rows, total } = await this.dataSource({
                page: this.currentPage,
                per_page: this.perPage,
                q: this.q,
                sort_by: this.sortBy,
                sort_dir: this.sortDir
            });
            this.rows = rows;
            this.total = total ?? rows.length;
        } else {
            this.rows = this.dataSource || [];
            this.total = this.rows.length;
        }
        this.render();
    }

    render() {
        if (!this.table) return;
        this.table.innerHTML = `
            <thead>
                <tr>
                    ${this.columns.map(col => `
                        <th data-key="${col.key}" class="${col.sortable ? 'sortable' : ''}" style="cursor:${col.sortable ? 'pointer' : 'default'}">
                            ${col.label}
                            ${(col.sortable || this.sortBy === col.key) ? (this.sortDir === 'asc' ? ' ▲' : ' ▼') : ''}
                        </th>
                    `).join('')}
                </tr>
            </thead>
            <tbody>
                ${this.rows.map(row => `
                    <tr>
                        ${this.columns.map(col => {
                            const cell = typeof col.render === 'function' ? col.render(row) : (row[col.key] ?? '');
                            return \`<td>\${cell}</td>\`;
                        }).join('')}
                    </tr>
                `).join('')}
            </tbody>
        `;
        this.table.querySelectorAll('th.sortable').forEach(th => {
            th.addEventListener('click', () => {
                const key = th.dataset.key;
                if (this.sortBy === key) this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';
                else { this.sortBy = key; this.sortDir = 'asc'; }
                this.loadData();
            });
        });
        if (this.enablePaginate) this.renderFooter();
    }

    renderHeader() {
        if (!this.tableHeader) return;
        this.tableHeader.innerHTML = `
            <div style="display:flex; justify-content:space-between; gap:10px;">
                <div>
                    ${this.enablePerPageSelector ? `
                        <label>Show
                        <select id="puppy_per_page">
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                        entries</label>` : ''}
                </div>
                <div>
                    ${this.enableSearch ? `
                        <input type="text" id="puppy_search" placeholder="Search..." />
                        <button id="puppy_search_btn">Search</button>` : ''}
                </div>
            </div>
        `;
        const search = document.querySelector('#puppy_search');
        const btn = document.querySelector('#puppy_search_btn');
        if (search) {
            let t;
            search.addEventListener('keyup', (e) => {
                clearTimeout(t);
                t = setTimeout(() => {
                    this.q = e.target.value;
                    this.currentPage = 1;
                    this.loadData();
                }, 400);
            });
        }
        if (btn) btn.addEventListener('click', () => {
            const s = document.querySelector('#puppy_search');
            this.q = s ? s.value : '';
            this.currentPage = 1;
            this.loadData();
        });
        const per = document.querySelector('#puppy_per_page');
        if (per) per.addEventListener('change', (e) => {
            this.perPage = parseInt(e.target.value);
            this.currentPage = 1;
            this.loadData();
        });
    }

    renderFooter() {
        if (!this.tableFooter) return;
        const totalPages = Math.max(1, Math.ceil(this.total / this.perPage));
        let pages = '';
        for (let i=1;i<=totalPages;i++){
            pages += `<button class="puppy-page ${this.currentPage===i?'active':''}" data-page="${i}">${i}</button>`;
        }
        this.tableFooter.innerHTML = `<div style="display:flex;justify-content:space-between;align-items:center;">
            <div>Showing ${Math.min((this.currentPage-1)*this.perPage+1, this.total)} to ${Math.min(this.currentPage*this.perPage, this.total)} of ${this.total} entries</div>
            <div>${pages}</div>
        </div>`;
        this.tableFooter.querySelectorAll('.puppy-page').forEach(b => b.addEventListener('click', (e) => {
            this.currentPage = parseInt(e.target.dataset.page);
            this.loadData();
        }));
    }

    injectStyles() {
        if (document.getElementById('puppy-styles')) return;
        const css = document.createElement('style');
        css.id = 'puppy-styles';
        css.innerHTML = `.d-table{width:100%;border-collapse:collapse}.d-table th,.d-table td{padding:8px;border:1px solid #eee}`;
        document.head.appendChild(css);
    }
}

// Expose to window
if (typeof window !== 'undefined') window.DataTable = DataTable;
